1. The Model:
	x: The x position of the vehicle.
	y: The y position of the vehicle.
	psi: The orientation of the vehicle.
	v: The current velocity.
	cte: The Cross-Track-Error
	epsi: The orientation error
	The update equation is following:

	fg[1 + x_start + t] = x1 - (x0 + v0 * CppAD::cos(psi0) * dt); fg[1 + y_start + t] = y1 - (y0 + v0 * CppAD::sin(psi0) * dt); fg[1 + psi_start + t] = psi1 - (psi0 + v0 * delta0 / Lf * dt); fg[1 + v_start + t] = v1 - (v0 + a0 * dt); fg[1 + cte_start + t] = cte1 - ((f0 - y0) + (v0 * CppAD::sin(epsi0) * dt)); fg[1 + epsi_start + t] = epsi1 - ((psi0 - psides0) + v0 * delta0 / Lf * dt);

2. Timestep Length and Elapsed Duration (N & dt):
	After several tryout, finally I changed the values to N=10 and dt=0.1 instead of initial value N=25 and dt=0.05.
	Smaller dt is better because it gives finer resolution.
	Because we use the 100ms latency, so I chose the larger value to deal with the latency.
	Smaller value than N=10 is not enough to calculate the trajectory.


3. Polynomial Fitting and MPC Preprocessing:
	The waypoints are preprocessed by transforming them to the vehicle's perspective.
	double x = (ptsx[i] - px) * cos(psi) + (ptsy[i] - py) * sin(psi);
	double y = -(ptsx[i] - px) * sin(psi) + (ptsy[i] - py) * cos(psi);

4. Model Predictive Control with Latency:
	When dealing with the latency,I chose dt=0.1 .And, I also incorporated the latency into the model.
	double x = v * cos(delta) * latency;
	double y = v * sin(delta) * latency;
	psi = v / Lf * delta * latency;
	cte = cte + v * sin(epsi) * latency;
	epsi = epsi + v / Lf * delta * latency;
	v = v + a * latency;